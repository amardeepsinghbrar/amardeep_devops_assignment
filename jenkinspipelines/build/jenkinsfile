pipeline {
    agent any

    parameters {
        string(name: 'GIT_BRANCH',defaultValue: "main", description: 'Git branch to build')
        string(name: 'COMMIT_ID', description: 'Commit ID to use for checking out the code')
    }
    environment{
        REPO_URL = "https://github.com/amardeepsinghbrar/spring-petclinic"
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    // Clean workspace before checkout
                    deleteDir()

                    // Fetch the code from the specified Git branch and commit ID
                    checkout([$class: 'GitSCM', branches: [[name: "${params.GIT_BRANCH}"]], userRemoteConfigs: [[url: "${env.REPO_URL}"]]])
                    //checkout scm: [$class: 'GitSCM', userRemoteConfigs: [[url: ${REPO_URL}, credentialsId: credential]], branches: [[name: ${params.GIT_BRANCH}]]],poll: false
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dockerImage = docker.build "petclinic:${IMAGE_TAG}"
                    //sh "docker tag ${IMAGE_REPO_NAME}:${IMAGE_TAG} ${REPOSITORY_URI}:$IMAGE_TAG"
                    //docker build -t  petclinic .
                    //docker tag petclinic amardeepsingh01/petclinic:${params.COMMIT_ID}
                    //docker push amardeepsingh01/petclinic:${params.COMMIT_ID}
                    sh "docker tag petclinic:${COMMIT_ID} amardeepsingh01/petclinic:$COMMIT_ID"
                    
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    sh "docker push amardeepsingh01/petclinic:${COMMIT_ID}"
                }
            }
        }
        stage('Removing image from local') {
            steps {
                script {
                    sh "docker rmi petclinic${COMMIT_ID}"
                    sh "docker rmi amardeepsingh01/petclinic:${COMMIT_ID}"
                }
            }
        }
    }
}
